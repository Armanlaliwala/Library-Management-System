# Library Management System

## Overview

The **Library Management System** is a Python program that helps manage books in a library. It provides functionalities to add books, display the list of books, count the total number of books, and check if all books are present. This project demonstrates the use of object-oriented programming (OOP) in Python, including class creation, methods, and list operations.

---

## Features

1. **Add Books**: Add books to the library.
2. **Display Books**: View the list of books currently in the library.
3. **Count Books**: Check the total number of books in the library.
4. **Check Book Consistency**: Verify if the book count matches the number of books stored in the library.

---

## How It Works

- The `Library` class is used to manage the library.
- Books are stored in a list, which allows dynamic addition and retrieval of books.
- The program simulates a "restart" by creating a new instance of the `Library` class.

---

## Code Functionality

### Class: `Library`

- **`__init__`**: Initializes an empty list to store books.
- **`add_book(self, book)`**: Adds a new book to the library and confirms the addition.
- **`display_books(self)`**: Displays the list of books. If no books are present, it notifies the user.
- **`num_of_books(self)`**: Returns the total number of books in the library.
- **`check(self)`**: Checks if the number of books matches the count returned by `num_of_books`.

---

## Example Output

### Program Run:
```plaintext
Library_managment_system
'Book 1' has been added.
'Book 2' has been added.
'Book 3' has been added.
'Book 4' has been added.
The name is ['Book 1', 'Book 2', 'Book 3', 'Book 4']
The no of books present in the library is : 4
All books are present
Restarting the program...
No book present
